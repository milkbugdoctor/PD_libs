#!/usr/bin/perl

my $debug = 0;
my $max_gap = my $def_max_gap = 5;

use Getopt::Std;
getopts('adg:i:v:');
$debug = 1 if $opt_d;
$| = 1 if $debug;
$max_gap = $opt_g if $opt_g ne '';

@ARGV == 1 || die "\nUsage: $0 [options] psl_infile > alignment.txt

    Note: psl_infile must be in \"psl_filter\" output format.

    Options:
	-a		don't show alignment string
	-d		debug
	-g gap		maximum gap allowed (default $def_max_gap)
	-i ident	min. identity score %
	-v cov		min. coverage %

";

use Cols;
require 'sequences.pl';
require 'align_string.pl';

my $infile = shift;

open(FOO, "sort_file tname tstart/n < $infile |") or die "huh? $!";

my $c = Cols::new(FOO);

my $last_tname;
my $align_num = 0;
my $contig_num = 0;
while (my $r = $c->get_row()) {
    my ($tsize, $qname, $qstarts, $tstarts, $blocksizes, $tname, $qseqs, $tseqs)
	= $c->get_col($r, 'tsize', 'qname', 'qstarts', 'tstarts', 'blocksizes', 'tname', 'qseqs', 'tseqs');
    if ($last_tname ne $tname) {
	$contig_num++;
	print "C $contig_num\t0\t$tname\t1-$tsize\n";
	$last_tname = $tname;
    }
    if ($qseqs eq '' || $tseqs eq '') {
	die "\ncolumns [qseqs] and [tseqs] must not be empty";
    }
    my $strand = $r->{strand};
    my @tstarts = split /,/, $tstarts;
    my @qstarts = split /,/, $qstarts;
    my @blocks = split /,/, $blocksizes;
    my @qseqs = split /,/, $qseqs;
    my @tseqs = split /,/, $tseqs;
    my $qlen = $r->{qsize};
    $align_num++;
    my $block_num = 1;
    while (@tstarts) {
	my $tstart = $tstarts[0];
	my $qstart = $qstarts[0];
	my $last_t = $tstart;
	my $last_q = $qstart;
	my $align = '';
	my $i = 0;
	my $matches = 0;
	for ($i = 0; $i <= $#tstarts; $i++) {
	    my $new_tstart = $tstarts[$i];
	    my $new_qstart = $qstarts[$i];
	    my $tgap = $new_tstart - $last_t;
	    my $qgap = $new_qstart - $last_q;
	    last if ($tgap > $max_gap || $qgap > $max_gap);
	    $align .= ' ' x $tgap;
	    $align .= 'i' x $qgap;
	    my $tseq = $tseqs[$i];
	    my $qseq = $qseqs[$i];
	    die "huh?" if length($tseq) != length($qseq);
	    $last_t = $new_tstart;
	    $last_q = $new_qstart;
	    for (my $j = 0; $j < length($tseq); $j++) {
		if (uc(substr($tseq, $j, 1)) eq uc(substr($qseq, $j, 1))) {
		    $align .= 'M';
		    # $align .= uc(substr($tseq, $j, 1)); 
		    $matches++;
		}
		else {
		    $align .= 'm';
		    # $align .= lc(substr($tseq, $j, 1)); 
		}
		$last_t++;
		$last_q++;
	    }
	}
	my $len = length($align);
	$align = compress_align_string($align);
	$align = '' if $opt_a;

	$tstart;
	my $tend = $last_t - 1;
	($tstart, $tend) = ($tend, $tstart) if $strand eq '-';
	$qstart++;
	my $qend = $last_q;
	my ($trim1, $trim2);
	if ($strand eq '-') {
	    $qend = $qlen - $qstarts[0];
	    $qstart = $qlen - $qstarts[-1] - $blocks[-1] + 1;
	    $trim1 = $qlen - $qend;
	    $trim2 = $qstart - 1;
	}
	else {
	    $trim1 = $qstart - 1;
	    $trim2 = $qlen - $qend;
	}
	my $ident = $matches/$len;
	my $cov = ($qend - $qstart + 1) / $qlen;
	my $score = $ident * $cov;
	round($score);
	last if $ident * 100 < $opt_i;
	last if $cov * 100 < $opt_v;
	printf "%s %d %d\t%d\t%d\t%s\t%s\n",
	    $qname, $tstart, $tend, $trim1, $trim2, $score, $align;

	splice(@tstarts, 0, $i);
	splice(@qstarts, 0, $i);
	splice(@tseqs, 0, $i);
	splice(@qseqs, 0, $i);
	$block_num++;
    }
}

sub round {
    $_[0] = round_to($_[0] * 100, .001);
}

