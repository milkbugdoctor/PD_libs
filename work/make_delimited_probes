#!/usr/bin/perl
#
#   Make maximum-length NimbleGen probes that don't contain repeats.
#

$debug = 0;

if ($ARGV[0] eq "-r") {
    $allow_repeats = shift;
}
$0 =~ s|.*/||;
(@ARGV >= 12) || die <<FOO;
\nUsage: $0 [-r] infile base1 base2 seq-col prefix both max-cycles min-tm max-tm opt-tm
		min-bases pre [tag1 tag2]

	base1		base that probe must start with
	base2		base that probe must end with
	seq-col		sense-strand sequence column
	prefix		look for prefix_id, prefix_chr, etc.
	both		make probes from both strands?
	max-cycles	max. NimbleGen cycles
	min-tm		min. probe Tm
	max-tm		min. probe Tm
	opt-tm		optimal probe Tm
	min-bases	min. probe length
	pre		probe name prefix, e.g., \"i\" for intron, \"m\" for mRNA
	tag1/tag2	used for good_probe()
 
	-r		allow lowercase (probably from RepeatMasker)

FOO

require 'columns.pl';
require 'probes.pl';
require 'NimbleGen.pl';
require 'read_markers.pl';
require 'perl_tm.pl';

$| = 1;

my ($filename, $first_base, $last_base, $seq_col, $prefix,
	$both_strands, $max_cycles, $min_tm, $max_tm, $opt_tm,
	$min_bases, $pre, $tag1, $tag2) = @ARGV;

my $fd;
open($fd, $filename) || die "can't open $filename";
my @header = get_header($fd);
my @marker_cols = find_marker_columns(\@header, $prefix);

$" = "\t";

print <<FOO;
# make_tagged_probes
#
#     probe_start   absolute top-strand genome starting position
#     probe_offset  sense-strand offset of probe in the parent sequence
#
FOO
print_tabbed(STDOUT, "@marker_cols probe_id probe_chr probe_strand" .
	" probe_start probe_end probe_len probe_offset" .
	" probe_seq probe_tm\n");

my @marker;
while (my @row = get_row($fd)) {
    @marker = get_marker(\@header, \@row) or die "can't get marker in row @row";
    my ($id, $chr, $strand, $start, $end, $len) = @marker;
    my $seq = get_col(\@header, \@row, $seq_col);

    do_seq($seq, $id, $chr, $strand, $start, $end, $len);
    if ($both_strands) {
	$strand = ($strand eq "-") ? "+" : "-";
	$seq = rc($seq);
	do_seq($seq, $id, $chr, $strand, $start, $end, $len);
    }
}

sub do_seq {
    my ($seq, $id, $chr, $strand, $start, $end, $len) = @_;
    my (%starts, %ends);
    for (my $pos = $len - 1; $pos >= 0; $pos--) {
	next if substr($seq, $pos, 1) ne $last_base;
	my $seq_3 = substr($seq, 0, $pos + 1);
	if (!$allow_repeats) {
	    $seq_3 =~ tr/acgt/nnnn/;
	}
	if (my $probe = NimbleGen::get_longest_good_probe($seq_3, $max_cycles)) {
	    my $first_time = 1;
	    while (1) {
		if ($first_time) {
		    $probe =~ s/^[^$first_base]+//i;
		    $first_time = 0;
		}
		else {
		    $probe =~ s/^$first_base[^$first_base]*//i;
		}
		last if $probe eq '';
		if (length($probe) < $min_bases) {
		    $bad_len++;
		    last;
		}
		next if ! ::good_probe($tag1 . $probe . $tag2);
		my $tm = PerlTm::approx_tm($probe);
		if ($tm < $min_tm) {
		    $bad_tm++;
		    last;
		}
		next if $tm > $max_tm;
		my $probe_start = $pos - length($probe) + 1; # probe offset
		$probe_end = $probe_start + length($probe) - 1;
		push(@{$starts{$probe_start}}, [ $probe, $probe_start, $probe_end, $strand, $tm ]);
	    }
	}
    }
    for my $probe_start (keys %starts) {
	my @best = sort {
	    my $a_tm = $a->[4];
	    my $b_tm = $b->[4];
	    abs($a_tm - $opt_tm) <=> abs($b_tm - $opt_tm)
	} @{$starts{$probe_start}};
	my $probe = $best[0];
	my $probe_end = $probe->[2];
	push(@{$ends{$probe_end}}, $probe);
    }
    for my $probe_end (keys %ends) {
	my @best = sort {
	    my $a_tm = $a->[4];
	    my $b_tm = $b->[4];
	    abs($a_tm - $opt_tm) <=> abs($b_tm - $opt_tm)
	} @{$ends{$probe_end}};
	my $probe = $best[0];
	doit(@$probe);
    }
}

#
#   probe_start and probe_end are 0-based and relative to the marker
#
sub doit {
    my ($probe, $probe_start, $probe_end, $probe_strand, $tm) = @_;

    my ($id, $chr, $strand, $start, $end, $len) = @marker;

    my @probe;

    my $probe_len = length($probe);
    if ($probe_strand eq '+') {
	$probe_start = $start + $probe_start;
    }
    else {
	$probe_start = $start + ($len - ($probe_end + 1));
    }
    $probe_id = sprintf "$pre\U${chr}${strand}P%06d:%d", $probe_start, $probe_len;
    my $probe_end = $probe_start + $probe_len - 1;
    push(@probe, @marker, $probe_id, $chr, $strand, $probe_start, $probe_end, $probe_len,
	$probe_start - $start, $probe, $tm);
    print join("\t", @probe), "\n";
    $good_probes++;
}

printf STDERR "N %d 8mer %d self10 %d low_tm %d too-short %d good %d total %d\n",
	$N, $rep8, $self, $bad_tm, $bad_len, $good_probes, $total_probes;

exit 0;

