#!/usr/bin/perl
#
#   Make maximum-length NimbleGen probes that don't contain repeats.
#

$debug = 1;

use Getopt::Std;
getopts('r'); 
$allow_repeats = $opt_r;
$debug = 1 if $opt_d;
$0 =~ s|.*/||;
(@ARGV >= 7) || die <<FOO;
\nUsage: $0 [-r] infile seq-col prefix both min-bases max-bases offset pre [tag1 tag2]

	seq-col		sense-strand sequence column
	prefix		look for prefix_id, prefix_chr, etc.
	both		make probes from both strands?
	min-bases	min. probe length
	max-bases	max. probe length
	offset		distance between probes
	pre		probe name prefix, e.g., \"i\" for intron, \"m\" for mRNA
	tag1/tag2	used for good_probe(tag1 . probe . tag2)
 
	-r		allow lowercase (probably from RepeatMasker)

FOO

require 'probes.pl';
require 'NimbleGen.pl';
require 'marker_reader.pl';

$| = 1;

my $max_cycles = $NimbleGen::max_rounds;

my ($filename, $seq_col, $prefix, $both_strands, $min_bases, $max_bases,
	$offset, $pre, $tag1, $tag2) = @ARGV;

my $reader = marker_reader::new($filename,
	"id chr strand start end len $seq_col", $prefix);
my $id_col = $reader->get_col_name("id");

print <<FOO;
# make_tagged_probes
#
#     probe_start   absolute top-strand genome starting position
#     probe_offset  sense-strand offset of probe in the parent sequence
#
FOO
print_tabbed(STDOUT, "$id_col probe_id probe_chr probe_strand" .
	" probe_start probe_end probe_len probe_offset" .
	" probe_seq\n");

my @marker;
while (my $row = $reader->read_marker()) {
    my ($id, $chr, $strand, $start, $end, $len, $seq) = @marker = @$row;

    do_seq($seq, $id, $chr, $strand, $start, $end, $len);
    if ($both_strands) {
	$strand = ($strand eq "-") ? "+" : "-";
	$seq = rc($seq);
	do_seq($seq, $id, $chr, $strand, $start, $end, $len);
    }
}

sub do_seq {
    my ($seq, $id, $chr, $strand, $start, $end, $len) = @_;
    my (%starts, %ends);
    warn "doing seq $id len $len on strand $strand\n" if $debug;
    for (my $pos = $len - 1; $pos >= 0; $pos -= $offset) {
	my $seq_3 = substr($seq, 0, $pos + 1);
	if (!$allow_repeats) {
	    $seq_3 =~ tr/acgt/nnnn/;
	}
	if (my $probe = NimbleGen::get_longest_good_probe($seq_3, $max_cycles)) {
	    $probe = substr($probe, -$max_bases) if $max_bases;
	    for (; $probe; $probe = substr($probe, 1)) {
		if (length($probe) < $min_bases) {
		    $bad_len++;
		    last;
		}
		next if ! ::good_probe($tag1 . $probe . $tag2); # check for repeats, etc.
		my $probe_start = $pos - length($probe) + 1; # probe offset
		$probe_end = $probe_start + length($probe) - 1;
		doit($probe, $probe_start, $probe_end, $strand);
		last;
	    }
	}
    }
}

#
#   probe_start and probe_end are 0-based and relative to the marker
#
sub doit {
    my ($probe, $probe_start, $probe_end, $probe_strand) = @_;

    my ($id, $chr, $strand, $start, $end, $len) = @marker;

    my @probe;

    my $probe_len = length($probe);
    if ($probe_strand eq '+') {
	$probe_start = $start + $probe_start;
    }
    else {
	$probe_start = $start + ($len - ($probe_end + 1));
    }
    $probe_id = sprintf "$pre\U${chr}${probe_strand}P%06d:%d", $probe_start, $probe_len;
    my $probe_end = $probe_start + $probe_len - 1;
    push(@probe, $id, $probe_id, $chr, $probe_strand, $probe_start, $probe_end, $probe_len,
	$probe_start - $start, $probe);
    print join("\t", @probe), "\n";
    $good_probes++;
}

printf STDERR "$0: N %d 8mer %d self10 %d too-short %d good %d total %d\n",
	$N, $rep8, $self, $bad_len, $good_probes, $total_probes;

exit 0;

